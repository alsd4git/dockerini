# Docker Compose stack for Telegram notifications
# This stack combines three services:
# 1. docker-telegram-notifier: Sends Docker events to Telegram
# 2. diun: Monitors Docker images for updates
# 3. watchtower: Automatically updates containers

# this file contains a few env variables that you have to manually set in portainer or replace before deploy with the actual text
# - ${TELEGRAM_CHAT_ID}
# - ${TELEGRAM_BOT_TOKEN}
# - ${DOCKER_DATA_BASEFOLDER}

services:
  notifier:
    container_name: docker-telegram-notifier
    image: lorcas/docker-telegram-notifier:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TELEGRAM_NOTIFIER_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_NOTIFIER_CHAT_ID: ${TELEGRAM_CHAT_ID}
    restart: always

  diun:
    container_name: diun
    image: crazymax/diun:latest
    command: serve
    volumes:
      - ${DOCKER_DATA_BASEFOLDER:-/opt/docker/data}/diun/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: Europe/Rome
      LOG_LEVEL: info
      LOG_JSON: false
      DIUN_WATCH_WORKERS: 20
      DIUN_WATCH_SCHEDULE: 0 */6 * * *
      DIUN_WATCH_JITTER: 30s
      DIUN_PROVIDERS_DOCKER: true
      DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT: true
      DIUN_NOTIF_TELEGRAM_TOKEN: ${TELEGRAM_BOT_TOKEN}
      DIUN_NOTIF_TELEGRAM_CHATIDS: ${TELEGRAM_CHAT_ID}
      DIUN_NOTIF_TELEGRAM_TEMPLATEBODY: |
        DIUN üê≥:
        Docker tag 
        {{ if .Entry.Image.HubLink }}
          [{{ .Entry.Image }}]({{ .Entry.Image.HubLink }})
        {{ else }}
          {{ .Entry.Image }}
        {{ end }} 
        which you subscribed to through {{ .Entry.Provider }} provider
        has been 
        {{ if (eq .Entry.Status "new") }}newly added{{ else }}updated{{ end }} 
        on {{ escapeMarkdown .Meta.Hostname }}.
    restart: always

  watchtower:
    container_name: watchtower-notif
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: Europe/Rome
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_NOTIFICATION_REPORT: true
      WATCHTOWER_SCHEDULE: 0 0 13 * * 1,3,5
      WATCHTOWER_NOTIFICATION_URL: |
        telegram://${TELEGRAM_BOT_TOKEN}@telegram/?channels=${TELEGRAM_CHAT_ID}&parsemode=html&preview=false
      WATCHTOWER_NOTIFICATION_TEMPLATE: |
        {{- if .Report -}}
          {{- with .Report -}}
            {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed

            {{- range .Updated }}
              - {{.Name}}: {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}} ‚¨ÜÔ∏è
            {{- end -}}

            {{- range .Fresh }}
              - {{.Name}}: {{.State}} üíö
            {{- end -}}

            {{- range .Skipped }}
              - {{.Name}}: {{.State}}: {{.Error}} ‚åõ
            {{- end -}}

            {{- range .Failed }}
              - {{.Name}}: {{.State}}: {{.Error}} ‚ùå
            {{- end -}}
          {{- end -}}
        {{- else -}}
          {{range .Entries -}}{{.Message}}{{"\n"}}{{- end -}}
        {{- end -}}
    restart: always
